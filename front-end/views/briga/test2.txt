<!DOCTYPE html>
<html lang="pt-br">
<head>
     <meta charset="UTF-8" />
     <meta name="viewport" content="width=device-width, initial-scale=1.0" />
     <title>CineMatch - Hora de Curtir!</title>

     <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">

     <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;500;700&display=swap" rel="stylesheet" />

     <script src="https://kit.fontawesome.com/5394ea2044.js" crossorigin="anonymous"></script>
     <style>
          html, body {
               height: 100%;
               margin: 0;
               font-family: 'Roboto', sans-serif;
               overflow: hidden;
               background: linear-gradient(135deg, #d4aFF7, #f3c2e0, #a8b5f0, #f7b7d7);
               background-size: 600% 600%;
               animation: gradientAnimation 25s ease infinite;
          }

          @keyframes gradientAnimation {
               0% { background-position: 0% 50%; }
               50% { background-position: 100% 50%; }
               100% { background-position: 0% 50%; }
          }

          /* TELA DE LOADING */
          #loading {
               /* display: none; é controlado por JS, mas a classe d-flex é do Bootstrap */
               background-color: rgba(40, 28, 68, 0.85);
               backdrop-filter: blur(5px);
               z-index: 1056; /* Acima de outros elementos Bootstrap como modals */
               color: #f3c2e0; /* Cor para o spinner */
          }
          #loading .spinner-border { /* Para o spinner Bootstrap */
            width: 4rem;
            height: 4rem;
            border-width: .35rem;
          }

          /* TELA DE ERRO */
          #erro {
               /* display: none; é controlado por JS */
               background-color: rgba(0,0,0,0.7);
               z-index: 1055;
               color: #fff;
          }
          #erro .alert-danger-custom { /* Classe customizada para o alerta */
              background-color: rgba(220, 53, 69, 0.85); /* Vermelho do Bootstrap com transparência */
              border-color: rgba(220, 53, 69, 0.9);
              color: #fff;
              backdrop-filter: blur(5px);
              padding: 2rem;
              border-radius: 0.5rem;
          }

          /* CONTEÚDO PRINCIPAL */
          #conteudo {
               /* display: none; é controlado por JS */
               color: #fff;
          }

          .navbar-custom {
               background-color: rgba(255, 255, 255, 0.1);
               backdrop-filter: blur(10px);
               border-bottom: 1px solid rgba(255, 255, 255, 0.2);
          }
          .navbar-custom .navbar-brand img {
               max-height: 40px;
          }
          .navbar-custom .btn-logout {
              color: #fff;
              font-size: 1.5rem;
              transition: color 0.2s ease-in-out;
              background: none;
              border: none;
          }
          .navbar-custom .btn-logout:hover {
              color: #d4aFF7;
          }

          .photo-and-actions-container {
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            flex-grow: 1;
            padding: 1rem;
            overflow: hidden; /* Para conter o card durante animações se necessário */
          }

          .photo-card {
               width: 100%;
               max-width: 380px; /* Ajustado para caber melhor em várias telas */
               aspect-ratio: 3 / 4.5;
               border-radius: 20px;
               overflow: hidden;
               position: relative;
               box-shadow: 0 10px 30px rgba(0, 0, 0, 0.25);
               background-color: #444; /* Fallback mais escuro */
               /* Estilos para a animação de swipe */
               transition: transform 0.6s cubic-bezier(0.68, -0.55, 0.27, 1.55), opacity 0.5s ease-out;
               transform: translateX(0) rotate(0deg);
               opacity: 1;
               cursor: grab; /* Pode ser útil se implementar drag-to-swipe */
               will-change: transform, opacity;
          }
          .photo-card.swipe-right {
               transform: translateX(120vw) rotate(25deg);
               opacity: 0;
          }
          .photo-card.swipe-left {
               transform: translateX(-120vw) rotate(-25deg);
               opacity: 0;
          }

          .photo-img {
               width: 100%;
               height: 100%;
               object-fit: cover;
               display: block;
          }
          .photo-text {
               position: absolute;
               bottom: 0;
               left: 0;
               right: 0;
               padding: 1.2rem; /* Ajustado */
               background: linear-gradient(to top, rgba(0, 0, 0, 0.9) 20%, rgba(0, 0, 0, 0));
               color: #fff;
          }
          .photo-name-and-age h2 {
               font-size: 1.5rem; /* Ajustado */
               font-weight: bold;
               margin-bottom: 0.2rem;
               display: inline;
               text-shadow: 1px 1px 3px rgba(0,0,0,0.7);
          }
          .photo-name-and-age h2:not(:last-child)::after {
              content: ", ";
              margin-right: 4px;
          }
          .photo-bio {
               font-size: 0.85rem; /* Ajustado */
               margin-bottom: 0.4rem;
               display: flex;
               align-items: center;
               text-shadow: 1px 1px 2px rgba(0,0,0,0.5);
          }
          .photo-bio a { /* Link TMDB */
              color: #f0f0f0;
              margin-left: 8px;
              font-size: 1.1rem; /* Ajustado */
              transition: color 0.2s ease;
          }
          .photo-bio a:hover {
               color: #d4aFF7;
          }
          .notas {
              margin-top: 0.4rem;
          }
          .notas .badge { /* Usando a classe badge do Bootstrap */
               font-size: 0.75rem; /* Ajustado */
               font-weight: 500;
               margin-right: 5px;
               margin-bottom: 5px;
               padding: 0.3em 0.6em; /* Ajustado */
          }

          .actions-bar {
               padding: 1rem 0;
               width: 100%;
               max-width: 420px; /* Ajustado */
               margin-top: 1rem; /* Reduzido */
          }
          .action-form {
              display: inline-block;
          }
          .actions-bar .btn {
               width: 65px; /* Ajustado */
               height: 65px; /* Ajustado */
               border-radius: 50%;
               font-size: 1.6rem; /* Ajustado */
               display: flex;
               align-items: center;
               justify-content: center;
               box-shadow: 0 4px 15px rgba(0,0,0,0.15);
               transition: transform 0.2s ease-out, box-shadow 0.2s ease, background-color 0.2s ease, border-color 0.2s ease;
               color: white; /* Cor do ícone padrão */
          }
          .actions-bar .btn:hover {
              transform: scale(1.12);
              box-shadow: 0 6px 20px rgba(0,0,0,0.25);
          }
          .action_dislike { background-color: #ff6961; border-color: #ff6961; }
          .action_dislike:hover { background-color: #e65049; border-color: #e65049; }
          .action_neutral { background-color: #AEC6CF; border-color: #AEC6CF; color: #212529;} /* Texto escuro para contraste */
          .action_neutral:hover { background-color: #9AB8C1; border-color: #9AB8C1; }
          .action_like { background-color: #77DD77; border-color: #77DD77; }
          .action_like:hover { background-color: #63c963; border-color: #63c963; }

          .loading_button.spinner-border { /* Para o spinner do Bootstrap */
              width: 1em; /* Tamanho relativo ao texto do botão */
              height: 1em;
              vertical-align: text-bottom;
          }
     </style>
</head>

<body class="d-flex flex-column">

     <div id="loading" class="d-flex justify-content-center align-items-center vh-100 vw-100 position-fixed top-0 start-0">
          <div class="spinner-border" role="status">
               <span class="visually-hidden">Carregando...</span>
          </div>
     </div>

     <div id="erro" class="d-flex justify-content-center align-items-center vh-100 vw-100 position-fixed top-0 start-0" style="display: none;">
        <div class="alert-danger-custom shadow-lg text-center">
            <h4 class="alert-heading mb-3"><i class="fas fa-exclamation-triangle me-2"></i>Oops! Algo deu errado.</h4>
            <p>Não foi possível carregar as informações do filme no momento.</p>
            <hr class="my-3">
            <p class="mb-0">Por favor, tente recarregar a página ou volte mais tarde.</p>
        </div>
     </div>

     <div id="conteudo" class="flex-grow-1 d-flex flex-column" style="display: none;">
          <nav class="navbar navbar-custom sticky-top"> {/* sticky-top pode ser útil */}
               <div class="container-fluid px-3">
                    <a class="navbar-brand" href="#"> {/* Adicionado link ao logo */}
                         <img src="../assets/img/heart_home.svg" alt="CineMatch Logo" />
                    </a>
                    <form class="action-form" id="action_logout">
                         <button class="btn btn-logout" id="logout" type="submit" aria-label="Sair">
                              <i class="fa-solid fa-right-from-bracket"></i>
                         </button>
                    </form>
               </div>
          </nav>

          <main class="photo-and-actions-container">
               <div class="photo-card">
                    <img src="" alt="Poster do Filme" class="photo-img" id="moviePoster" /> {/* Populado por JS */}
                    <div class="photo-text">
                         <div class="photo-name-and-age">
                              <h2 id="movieTitle"></h2><h2 id="movieYear"></h2> {/* Populado por JS */}
                         </div>
                         <div class="photo-bio mt-1">
                              <span id="movieOverview" class="d-block mb-2"></span> {/* Populado por JS, d-block para ocupar largura */}
                              <a href="#" id="tmdbLink" target="_blank" rel="noopener noreferrer" aria-label="Mais informações no TMDB" class="text-decoration-none">
                                   <i class="fa-solid fa-circle-info"></i> <small>Detalhes</small>
                              </a> {/* Populado por JS */}
                         </div>
                         <div class="notas mt-2">
                              <span id="movieGenresContainer"></span> {/* Container para badges de gênero */}
                              <span id="movieRatingContainer" class="ms-2"></span> {/* Container para badge de nota */}
                         </div>
                    </div>
               </div>

               <div class="actions-bar d-flex justify-content-around align-items-center mt-3">
                    <form class="action-form" id="action_dislike">
                         <button class="btn action_dislike" type="submit" id="dislike" aria-label="Não Gostei">
                              <i class="fas fa-times"></i>
                         </button>
                         <span class="loading_button spinner-border spinner-border-sm" style="display: none;" role="status"></span>
                    </form>
                    <form class="action-form" id="action_neutral">
                         <button class="btn action_neutral" type="submit" id="neutral" aria-label="Neutro ou Ver Depois">
                              <i class="fa-solid fa-eye"></i>
                         </button>
                         <span class="loading_button spinner-border spinner-border-sm" style="display: none;" role="status"></span>
                    </form>
                    <form class="action-form" id="action_like">
                         <button class="btn action_like" type="submit" id="like" aria-label="Gostei">
                              <i class="fas fa-heart"></i>
                         </button>
                         <span class="loading_button spinner-border spinner-border-sm" style="display: none;" role="status"></span>
                    </form>
               </div>
          </main>
     </div>

     <script src="https://cdn.socket.io/4.0.0/socket.io.min.js"></script>
     <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"></script>

     <script>
        document.addEventListener('DOMContentLoaded', () => {
            const photoCardElement = document.getElementById('conteudo')?.querySelector('.photo-card');
            const likeForm = document.getElementById('action_like');
            const dislikeForm = document.getElementById('action_dislike');
            const neutralForm = document.getElementById('action_neutral');

            // Elementos do card para popular com dados do filme (exemplos)
            const moviePoster = document.getElementById('moviePoster');
            const movieTitle = document.getElementById('movieTitle');
            const movieYear = document.getElementById('movieYear');
            const movieOverview = document.getElementById('movieOverview');
            const tmdbLink = document.getElementById('tmdbLink');
            const movieGenresContainer = document.getElementById('movieGenresContainer');
            const movieRatingContainer = document.getElementById('movieRatingContainer');


            // ----- INÍCIO DA LÓGICA DE ANIMAÇÃO DE SWIPE -----
            // (Esta parte deve ser integrada e adaptada ao seu fluxo de dados e eventos do Socket.IO em like.js)

            function handleLikeAction(event) {
                if (event) event.preventDefault();
                if (!photoCardElement) return;

                // ADICIONE AQUI: Sua lógica para enviar o "like" ao servidor via Socket.IO
                // Ex: socket.emit('movie_action', { token: seuToken, action: 'like', movieId: filmeAtual.id, genres: filmeAtual.genres });
                console.log('Filme CURTIDO (enviar para o servidor)');

                photoCardElement.classList.add('swipe-right');
                photoCardElement.addEventListener('transitionend', onSwipeEnd, { once: true });
            }

            function handleDislikeAction(event) {
                if (event) event.preventDefault();
                if (!photoCardElement) return;

                // ADICIONE AQUI: Sua lógica para enviar o "dislike" ao servidor
                console.log('Filme NÃO CURTIDO (enviar para o servidor)');

                photoCardElement.classList.add('swipe-left');
                photoCardElement.addEventListener('transitionend', onSwipeEnd, { once: true });
            }

            function handleNeutralAction(event) {
                if (event) event.preventDefault();
                if (!photoCardElement) return;

                // ADICIONE AQUI: Sua lógica para enviar a ação "neutral" ao servidor
                console.log('Ação NEUTRA (enviar para o servidor)');

                // Animação de fade out para neutro
                photoCardElement.style.transition = 'opacity 0.4s ease-out';
                photoCardElement.style.opacity = '0';
                photoCardElement.addEventListener('transitionend', function onNeutralFadeEnd() {
                    photoCardElement.removeEventListener('transitionend', onNeutralFadeEnd);
                    prepareNextCard();
                    // Restaura transições originais importantes para o swipe
                    requestAnimationFrame(() => {
                         photoCardElement.style.transition = 'transform 0.6s cubic-bezier(0.68, -0.55, 0.27, 1.55), opacity 0.5s ease-out';
                    });
                }, { once: true });
            }

            function onSwipeEnd() {
                prepareNextCard();
            }

            function prepareNextCard() {
                if (!photoCardElement) return;

                photoCardElement.style.display = 'none'; // Esconde enquanto atualiza
                photoCardElement.classList.remove('swipe-right', 'swipe-left');
                
                // Força o reflow para garantir que as classes foram removidas e o transform resetado
                // antes de reaparecer e possivelmente re-aplicar a transição de opacidade.
                void photoCardElement.offsetWidth;


                // ** PASSO CRUCIAL: INTEGRE AQUI SUA LÓGICA DE like.js **
                // 1. Chame sua função que busca/recebe os dados do PRÓXIMO filme.
                // 2. Atualize os elementos do card (moviePoster, movieTitle, etc.) com os novos dados.
                // Exemplo de como popular (você fará isso com dados reais):
                // loadAndDisplayNextMovie(); // Esta é a SUA função que deve ser chamada
                console.log('Chamando sua função para carregar e exibir o próximo filme...');
                // SIMULAÇÃO de carregamento de próximo filme:
                // (Substitua este setTimeout pela sua lógica real de carregar o próximo filme)
                setTimeout(() => {
                    // Exemplo de atualização de conteúdo (adapte com os dados reais do filme):
                    if (moviePoster) moviePoster.src = 'https://image.tmdb.org/t/p/w500/nextMoviePoster.jpg'; // Exemplo
                    if (movieTitle) movieTitle.textContent = 'Novo Título do Filme';
                    if (movieYear) movieYear.textContent = '(2025)';
                    if (movieOverview) movieOverview.textContent = 'Uma nova e emocionante descrição para o próximo filme que aparecerá...';
                    if (tmdbLink) tmdbLink.href = 'https://www.themoviedb.org/movie/newid';
                    
                    if (movieGenresContainer) {
                        movieGenresContainer.innerHTML = ''; // Limpa gêneros anteriores
                        ['Aventura', 'Sci-Fi'].forEach(genre => { // Exemplo de novos gêneros
                            const badge = document.createElement('span');
                            badge.className = 'badge bg-light text-dark me-1';
                            badge.textContent = genre;
                            movieGenresContainer.appendChild(badge);
                        });
                    }
                    if (movieRatingContainer) {
                         movieRatingContainer.innerHTML = `<span class="badge bg-warning text-dark"><i class="fas fa-star me-1"></i>8.5</span>`; // Exemplo
                    }


                    // Reexibe o card. A opacidade já deve ser 1 pela remoção das classes de swipe.
                    // O transform já foi resetado para o estado inicial no CSS pela remoção das classes.
                    photoCardElement.style.display = 'block'; // Ou 'flex', etc.
                    // Para um efeito de fade-in suave no novo card (opcional):
                    // photoCardElement.style.opacity = '0';
                    // requestAnimationFrame(() => {
                    //     photoCardElement.style.transition = 'opacity 0.4s ease-in';
                    //     photoCardElement.style.opacity = '1';
                    //     photoCardElement.addEventListener('transitionend', () => {
                    //         // Restaura transição original para swipes
                    //         photoCardElement.style.transition = 'transform 0.6s cubic-bezier(0.68, -0.55, 0.27, 1.55), opacity 0.5s ease-out';
                    //     }, { once: true });
                    // });
                }, 100); // Pequeno delay para simular carregamento e permitir que o display:none seja processado

            }

            // Adiciona os event listeners aos formulários (ou botões, se preferir)
            if (likeForm) likeForm.addEventListener('submit', handleLikeAction);
            if (dislikeForm) dislikeForm.addEventListener('submit', handleDislikeAction);
            if (neutralForm) neutralForm.addEventListener('submit', handleNeutralAction);


            // ----- FIM DA LÓGICA DE ANIMAÇÃO DE SWIPE -----


            // ----- INÍCIO DO SEU CÓDIGO like.js EXISTENTE (adaptado) -----
            // Exemplo: Como seu like.js poderia começar a mostrar o conteúdo e carregar o primeiro filme
            // Esta parte é SUA para integrar. O código abaixo é apenas um exemplo conceitual.

            // const socket = io(); // Você já tem isso no seu like.js
            // const loadingScreen = document.getElementById('loading');
            // const errorScreen = document.getElementById('erro');
            // const contentScreen = document.getElementById('conteudo');

            // function showLoading() {
            //     if(loadingScreen) loadingScreen.style.display = 'flex'; // Usa 'flex' por causa do justify/align
            //     if(errorScreen) errorScreen.style.display = 'none';
            //     if(contentScreen) contentScreen.style.display = 'none';
            // }

            // function showError() {
            //     if(loadingScreen) loadingScreen.style.display = 'none';
            //     if(errorScreen) errorScreen.style.display = 'flex'; // Usa 'flex'
            //     if(contentScreen) contentScreen.style.display = 'none';
            // }

            // function showContent() {
            //     if(loadingScreen) loadingScreen.style.display = 'none';
            //     if(errorScreen) errorScreen.style.display = 'none';
            //     if(contentScreen) contentScreen.style.display = 'flex'; // Usa 'flex' para o layout de coluna
            // }

            // function loadInitialMovie() {
            //     showLoading();
            //     // ADICIONE AQUI: Sua lógica para buscar o primeiro filme via Socket.IO ou API
            //     // Quando os dados chegarem:
            //     //   popularCardComDadosDoFilme(dadosDoFilme);
            //     //   showContent();
            //     // Se der erro:
            //     //   showError();
            //     console.log("Função loadInitialMovie chamada - implemente sua busca de filme aqui.");
            //     // Simulação:
            //     setTimeout(() => {
            //         console.log("Simulando que o primeiro filme carregou.");
            //         // popularCardComDadosDoFilme({ title: "Filme Inicial", year: "(2024)", ... });
            //         // showContent();
            //     }, 1500);
            // }

            // loadInitialMovie(); // Chame para carregar o primeiro filme

            // Seus listeners de Socket.IO (socket.on(...)) e outras lógicas do like.js viriam aqui.
            // Por exemplo, quando o servidor envia um novo filme, você chamaria uma função para
            // atualizar o card (semelhante à parte de atualização em prepareNextCard).

            // ----- FIM DO SEU CÓDIGO like.js EXISTENTE (adaptado) -----

        });
     </script>
     </body>
</html>